#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include<string.h>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long int ll;
class WinterAndSnowmen {
public:
	ll modu ;
	void find(int N,int M,ll dp1[],ll dp2[],int m1,int m2)
	{
		ll store[3000];
		memset(dp1,0,sizeof(dp1));
		memset(dp2,0,sizeof(dp2));
		dp1[0] = dp2[0] = 1;
		for(int i=1;i<=N;i++){
			memset(store,0,sizeof(store));
			for(int j=0;j<=m1;j++){
				store[i^j] += dp1[j];
			}
			for(int j=0;j<=m1;j++){
				dp1[j] = (dp1[j] + store[j])%modu;
			}
		}
		for(int i=1;i<=m1;i++){
			dp2[i] = dp1[i];
		}
		for(int i=N+1;i<=M;i++){
			memset(store,0,sizeof(store));
            for(int j=0;j<=m2;j++){
                store[i^j] += dp2[j];
            }
            for(int j=0;j<=m2;j++){
                dp2[j] = (dp2[j] + store[j])%modu;
            }
		}
	}
	int getNumber(int N, int M) {
		modu = (1000000007);
		ll dp1[3000],dp2[3000],m1=0,m2=0,answer=0;
		for(int i=1;i<=N;i++)	m1 = m1 | i;
		for(int i=1;i<=M;i++)	m2 = m2 | i;
		if( N < M)	find(N,M,dp1,dp2,m1,m2);
		else	find(M,N,dp2,dp1,m2,m1);
		for(int i=0;i<=m1;i++)	printf("%lld %lld ASA\n",dp1[i],dp2[i]);
		for(int j=0;j<=m1;j++){
			for(int k=j+1;k<=m2;k++){
				answer = (answer + dp1[j]*dp2[k])%modu;
			}
		}
		return answer;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	WinterAndSnowmen *obj;
	int answer;
	obj = new WinterAndSnowmen();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 5;
	p2 = 74;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 4;
	p2 = 216;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 47;
	p1 = 74;
	p2 = 962557390;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
